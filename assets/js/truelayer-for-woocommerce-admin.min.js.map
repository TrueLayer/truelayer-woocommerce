{"version":3,"file":"truelayer-for-woocommerce-admin.min.js","mappings":"svBACAA,SAASC,iBAAiB,oBAAoB,WAE1CC,WAAaF,SAASG,kBAAkB,QAE3C,IAAMC,EAAwBJ,SAASK,eAAe,iCAChDC,EAAmBN,SAASK,eAAe,kCAE1CE,EAA6BP,SAASK,eAAe,mEACrDG,EAA+BR,SAASK,eAAe,mEAE1DI,EAAWT,SAASK,eAAe,6CACnCK,EAAeV,SAASK,eAAe,iDACpCM,EAAcX,SAASK,eAAe,sDACzCO,EAAaZ,SAASK,eAAe,sDAErCQ,EAAeb,SAASK,eAAe,qDACvCS,EAAmBd,SAASK,eAAe,yDAC3CU,EAAkBf,SAASK,eAAe,8DAC1CW,EAAiBhB,SAASK,eAAe,8DAEtCY,EAAiB,CAAEV,EAA4BC,GAC/CU,EAAqB,CAAET,EAAUC,EAAcC,EAAaC,GAC5DO,EAAqB,CAAEN,EAAcC,EAAkBC,EAAiBC,GAGtEI,EAAyB,WAExBhB,EAAsBiB,QACsB,KAAvCb,EAA6Bc,MAC7BpB,WAAW,GAAGqB,gBAAgB,YAE9BrB,WAAW,GAAGsB,aAAa,YAAY,GAI3CtB,WAAW,GAAGqB,gBAAgB,aAKhCE,EAA4B,SAACC,GAG/B,IAAIC,EAAkB3B,SAASK,eAAe,+CAC1CuB,EAAwB,EAAID,EAAgBE,YAAYA,YAAYC,iBAAiB,UAGrFC,EAAe/B,SAASK,eAAe,uDACvC2B,EAAqB,EAAID,EAAaF,YAAYA,YAAYC,iBAAiB,UAEpE,mBAAXJ,GAEAC,EAAgBM,MAAMC,QAAU,OAChCN,EAAsB,GAAGK,MAAMC,QAAU,OAGzCH,EAAaE,MAAMC,QAAU,QAC7BF,EAAmB,GAAGC,MAAMC,QAAU,SAEnB,oBAAZR,IAEPC,EAAgBM,MAAMC,QAAU,QAChCN,EAAsB,GAAGK,MAAMC,QAAU,QAGzCH,EAAaE,MAAMC,QAAU,OAC7BF,EAAmB,GAAGC,MAAMC,QAAU,SAKxCC,EAAwB,WAEvB7B,EAAiBe,QACW,KAAvBR,EAAaS,OAA6C,KAA3BR,EAAiBQ,OAA4C,KAA1BP,EAAgBO,OAA2C,KAAzBN,EAAeM,MACnHpB,WAAW,GAAGqB,gBAAgB,YAE9BrB,WAAW,GAAGsB,aAAa,YAAY,GAI3CtB,WAAW,GAAGqB,gBAAgB,aAKhCa,EAAoB,WAElB9B,EAAiBe,SACM,KAAnBZ,EAASa,OAAyC,KAAvBZ,EAAaY,OAAwC,KAAtBX,EAAYW,OAAuC,KAArBV,EAAWU,MAOvGpB,WAAW,GAAGqB,gBAAgB,YAJ1BrB,WAAW,GAAGsB,aAAa,YAAY,IAS/ClB,EAAiBe,SACjBI,EAA0B,mBAC1BU,MAGAV,EAA0B,mBAC1BW,KAIP9B,EAAiBL,iBAAiB,UAAU,WAClCK,EAAiBe,SAChBI,EAA0B,mBAChCU,MAGMV,EAA0B,mBAC1BW,QAKRjB,EAAmBkB,SAAQ,SAAAC,GACvBA,EAAQrC,iBAAiB,SAAS,WAC9BkC,UAMRjB,EAAmBmB,SAAQ,SAAAC,GACvBA,EAAQrC,iBAAiB,SAAS,WAC9BmC,UAKRhB,IAGAH,EAAeoB,SAAQ,SAAAC,GACnBA,EAAQrC,iBAAiB,SAAS,WAC9BmB,UAKXhB,EAAsBH,iBAAiB,UAAU,WAC1CmB,W","sources":["webpack://truelayer-for-woocommerce/./assets/js/truelayer-for-woocommerce-admin.js"],"sourcesContent":["\ndocument.addEventListener('DOMContentLoaded', () => {\n\n    saveButton = document.getElementsByName('save');\n\n\tconst pluginEnabledCheckbox = document.getElementById('woocommerce_truelayer_enabled');\n\tconst testmodeCheckbox = document.getElementById('woocommerce_truelayer_testmode');\n\n    let beneficiaryMerchantAccount = document.getElementById('woocommerce_truelayer_truelayer_beneficiary_merchant_account_id');\n    let beneficiaryAccountHolderName = document.getElementById('woocommerce_truelayer_truelayer_beneficiary_account_holder_name');\n\n\tlet clientId = document.getElementById('woocommerce_truelayer_truelayer_client_id');\n\tlet sharedSecret = document.getElementById('woocommerce_truelayer_truelayer_client_secret');\n    let certificate = document.getElementById('woocommerce_truelayer_truelayer_client_certificate');\n\tlet privateKey = document.getElementById('woocommerce_truelayer_truelayer_client_private_key');\n\n\tlet testClientId = document.getElementById('woocommerce_truelayer_truelayer_sandbox_client_id');\n\tlet testSharedSecret = document.getElementById('woocommerce_truelayer_truelayer_sandbox_client_secret');\n\tlet testCertificate = document.getElementById('woocommerce_truelayer_truelayer_sandbox_client_certificate');\n\tlet testPrivateKey = document.getElementById('woocommerce_truelayer_truelayer_sandbox_client_private_key');\n\n    let beneficiarySet = [ beneficiaryMerchantAccount, beneficiaryAccountHolderName ];\n    let liveEnvironmentSet = [ clientId, sharedSecret, certificate, privateKey ];\n    let testEnvironmentSet = [ testClientId, testSharedSecret, testCertificate, testPrivateKey ];\n\n    // Check for empty fields in the Test Environment.\n    const checkBeneficiaryFields = () => {\n\n        if(pluginEnabledCheckbox.checked){\n            if((beneficiaryAccountHolderName.value !== '')) {\n                saveButton[0].removeAttribute('disabled');\n            } else {\n                saveButton[0].setAttribute('disabled', true);\n            }\n\n        } else {\n            saveButton[0].removeAttribute('disabled');\n        }\n    }\n\n    // Toggle Live/Sandbox display.\n    const fieldsDisplayAvailability = (shifter) => {\n\n        // Production field group\n        let productionField = document.getElementById('woocommerce_truelayer_truelayer_credentials')\n        let productionFieldLabels = [...productionField.nextSibling.nextSibling.querySelectorAll('tbody')];\n\n        // Sandbox field group\n        let sandboxField = document.getElementById('woocommerce_truelayer_truelayer_sandbox_credentials')\n        let sandboxFieldLabels = [...sandboxField.nextSibling.nextSibling.querySelectorAll('tbody')];\n\n        if (shifter == 'testEnvironment') {\n            // Production Fields Disabled\n            productionField.style.display = \"none\";\n            productionFieldLabels[0].style.display = \"none\";\n\n            // Sandbox Fields Disabled\n            sandboxField.style.display = \"block\";\n            sandboxFieldLabels[0].style.display = \"block\";\n\n        } else if (shifter === 'liveEnvironment') {\n            // Production Fields Enabled\n            productionField.style.display = \"block\";\n            productionFieldLabels[0].style.display = \"block\";\n\n            // Sandbox Fields Disabled\n            sandboxField.style.display = \"none\";\n            sandboxFieldLabels[0].style.display = \"none\";\n        }\n    }\n\n    // Check for empty fields in the Test Environment.\n    const checkTestButtonValues = () => {\n\n        if(testmodeCheckbox.checked){\n            if((testClientId.value !== '') && (testSharedSecret.value !== '') && (testCertificate.value !== '') && (testPrivateKey.value !== '')) {\n                saveButton[0].removeAttribute('disabled');\n            } else {\n                saveButton[0].setAttribute('disabled', true);\n            }\n\n        } else {\n            saveButton[0].removeAttribute('disabled');\n        }\n    }\n\n    // Check for empty fields in the Live Environment.\n    const checkButtonValues = () => {\n\n        if(!testmodeCheckbox.checked){\n            if((clientId.value !== '') && (sharedSecret.value !== '') && (certificate.value !== '') && (privateKey.value !== '')) {\n                saveButton[0].removeAttribute('disabled');\n            } else {\n                saveButton[0].setAttribute('disabled', true);\n            }\n\n        }  else {\n            saveButton[0].removeAttribute('disabled');\n        }\n    }\n\n\t// On page start, check if Test mode is enabled\n    if (testmodeCheckbox.checked) {\n        fieldsDisplayAvailability('testEnvironment');\n        checkTestButtonValues();\n\n    } else {\n        fieldsDisplayAvailability('liveEnvironment');\n        checkButtonValues()\n    }\n\n    // Check for field values upon enabling/disabling Test mode\n\ttestmodeCheckbox.addEventListener('change', () => {\n        if(testmodeCheckbox.checked){\n            fieldsDisplayAvailability('testEnvironment');\n\t\t    checkTestButtonValues();\n\n        } else {\n            fieldsDisplayAvailability('liveEnvironment');\n            checkButtonValues();\n        }\n\t})\n\n    // Disable/enable button upon all Sandbox input fields empty/non-empty.\n    testEnvironmentSet.forEach(element => {\n        element.addEventListener('input', () => {\n            checkTestButtonValues();\n        })\n    });\n\n\n    // Disable/enable button upon all Live input fields empty/non-empty.\n    liveEnvironmentSet.forEach(element => {\n        element.addEventListener('input', () => {\n            checkButtonValues();\n        })\n    });\n\n    // On plugin start, check if the beneficiary fields have values.\n    checkBeneficiaryFields();\n\n    // Disable/enable button upon all Beneficiary input fields empty/non-empty.\n    beneficiarySet.forEach(element => {\n        element.addEventListener('input', () => {\n            checkBeneficiaryFields();\n        })\n    });\n\n    // Check for field values upon enabling/disabling Test mode\n\tpluginEnabledCheckbox.addEventListener('change', () => {\n        checkBeneficiaryFields();\n\t})\n})\n"],"names":["document","addEventListener","saveButton","getElementsByName","pluginEnabledCheckbox","getElementById","testmodeCheckbox","beneficiaryMerchantAccount","beneficiaryAccountHolderName","clientId","sharedSecret","certificate","privateKey","testClientId","testSharedSecret","testCertificate","testPrivateKey","beneficiarySet","liveEnvironmentSet","testEnvironmentSet","checkBeneficiaryFields","checked","value","removeAttribute","setAttribute","fieldsDisplayAvailability","shifter","productionField","productionFieldLabels","nextSibling","querySelectorAll","sandboxField","sandboxFieldLabels","style","display","checkTestButtonValues","checkButtonValues","forEach","element"],"sourceRoot":""}