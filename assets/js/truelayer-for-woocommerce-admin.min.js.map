{"version":3,"file":"truelayer-for-woocommerce-admin.min.js","mappings":"svBACAA,SAASC,iBAAiB,oBAAoB,WAE1CC,WAAaF,SAASG,kBAAkB,QAE3C,IAAMC,EAAwBJ,SAASK,eAAe,iCAChDC,EAAmBN,SAASK,eAAe,kCAE1CE,EAA6BP,SAASK,eAAe,mEACrDG,EAA+BR,SAASK,eAAe,mEAE1DI,EAAWT,SAASK,eAAe,6CACnCK,EAAeV,SAASK,eAAe,iDACpCM,EAAcX,SAASK,eAAe,sDACzCO,EAAaZ,SAASK,eAAe,sDAErCQ,EAAeb,SAASK,eAAe,qDACvCS,EAAmBd,SAASK,eAAe,yDAC3CU,EAAkBf,SAASK,eAAe,8DAC1CW,EAAiBhB,SAASK,eAAe,8DAEtCY,EAAiB,CAAEV,EAA4BC,GAC/CU,EAAqB,CAAET,EAAUC,EAAcC,EAAaC,GAC5DO,EAAqB,CAAEN,EAAcC,EAAkBC,EAAiBC,GAGtEI,EAAyB,WAExBhB,EAAsBiB,QACsB,KAAvCb,EAA6Bc,MAC7BpB,WAAW,GAAGqB,gBAAgB,YAE9BrB,WAAW,GAAGsB,aAAa,YAAY,GAI3CtB,WAAW,GAAGqB,gBAAgB,WAErC,EAGKE,EAA4B,SAACC,GAG/B,IAAIC,EAAkB3B,SAASK,eAAe,+CAC1CuB,EAAwB,EAAID,EAAgBE,YAAYA,YAAYC,iBAAiB,UAGrFC,EAAe/B,SAASK,eAAe,uDACvC2B,EAAqB,EAAID,EAAaF,YAAYA,YAAYC,iBAAiB,UAEpE,mBAAXJ,GAEAC,EAAgBM,MAAMC,QAAU,OAChCN,EAAsB,GAAGK,MAAMC,QAAU,OAGzCH,EAAaE,MAAMC,QAAU,QAC7BF,EAAmB,GAAGC,MAAMC,QAAU,SAEnB,oBAAZR,IAEPC,EAAgBM,MAAMC,QAAU,QAChCN,EAAsB,GAAGK,MAAMC,QAAU,QAGzCH,EAAaE,MAAMC,QAAU,OAC7BF,EAAmB,GAAGC,MAAMC,QAAU,OAE7C,EAGKC,EAAwB,WAEvB7B,EAAiBe,QACW,KAAvBR,EAAaS,OAA6C,KAA3BR,EAAiBQ,OAA4C,KAA1BP,EAAgBO,OAA2C,KAAzBN,EAAeM,MACnHpB,WAAW,GAAGqB,gBAAgB,YAE9BrB,WAAW,GAAGsB,aAAa,YAAY,GAI3CtB,WAAW,GAAGqB,gBAAgB,WAErC,EAGKa,EAAoB,WAElB9B,EAAiBe,SACM,KAAnBZ,EAASa,OAAyC,KAAvBZ,EAAaY,OAAwC,KAAtBX,EAAYW,OAAuC,KAArBV,EAAWU,MAOvGpB,WAAW,GAAGqB,gBAAgB,YAJ1BrB,WAAW,GAAGsB,aAAa,YAAY,EAMlD,EAGGlB,EAAiBe,SACjBI,EAA0B,mBAC1BU,MAGAV,EAA0B,mBAC1BW,KAIP9B,EAAiBL,iBAAiB,UAAU,WAClCK,EAAiBe,SAChBI,EAA0B,mBAChCU,MAGMV,EAA0B,mBAC1BW,IAEV,IAGEjB,EAAmBkB,SAAQ,SAAAC,GACvBA,EAAQrC,iBAAiB,SAAS,WAC9BkC,GACH,GACJ,IAIDjB,EAAmBmB,SAAQ,SAAAC,GACvBA,EAAQrC,iBAAiB,SAAS,WAC9BmC,GACH,GACJ,IAGDhB,IAGAH,EAAeoB,SAAQ,SAAAC,GACnBA,EAAQrC,iBAAiB,SAAS,WAC9BmB,GACH,GACJ,IAGJhB,EAAsBH,iBAAiB,UAAU,WAC1CmB,GACN,GACD,G","sources":["webpack://truelayer-for-woocommerce/./assets/js/truelayer-for-woocommerce-admin.js"],"sourcesContent":["\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n    saveButton = document.getElementsByName('save');\r\n\r\n\tconst pluginEnabledCheckbox = document.getElementById('woocommerce_truelayer_enabled');\r\n\tconst testmodeCheckbox = document.getElementById('woocommerce_truelayer_testmode');\r\n\r\n    let beneficiaryMerchantAccount = document.getElementById('woocommerce_truelayer_truelayer_beneficiary_merchant_account_id');\r\n    let beneficiaryAccountHolderName = document.getElementById('woocommerce_truelayer_truelayer_beneficiary_account_holder_name');\r\n\r\n\tlet clientId = document.getElementById('woocommerce_truelayer_truelayer_client_id');\r\n\tlet sharedSecret = document.getElementById('woocommerce_truelayer_truelayer_client_secret');\r\n    let certificate = document.getElementById('woocommerce_truelayer_truelayer_client_certificate');\r\n\tlet privateKey = document.getElementById('woocommerce_truelayer_truelayer_client_private_key');\r\n\r\n\tlet testClientId = document.getElementById('woocommerce_truelayer_truelayer_sandbox_client_id');\r\n\tlet testSharedSecret = document.getElementById('woocommerce_truelayer_truelayer_sandbox_client_secret');\r\n\tlet testCertificate = document.getElementById('woocommerce_truelayer_truelayer_sandbox_client_certificate');\r\n\tlet testPrivateKey = document.getElementById('woocommerce_truelayer_truelayer_sandbox_client_private_key');\r\n\r\n    let beneficiarySet = [ beneficiaryMerchantAccount, beneficiaryAccountHolderName ];\r\n    let liveEnvironmentSet = [ clientId, sharedSecret, certificate, privateKey ];\r\n    let testEnvironmentSet = [ testClientId, testSharedSecret, testCertificate, testPrivateKey ];\r\n\r\n    // Check for empty fields in the Test Environment.\r\n    const checkBeneficiaryFields = () => {\r\n\r\n        if(pluginEnabledCheckbox.checked){\r\n            if((beneficiaryAccountHolderName.value !== '')) {\r\n                saveButton[0].removeAttribute('disabled');\r\n            } else {\r\n                saveButton[0].setAttribute('disabled', true);\r\n            }\r\n\r\n        } else {\r\n            saveButton[0].removeAttribute('disabled');\r\n        }\r\n    }\r\n\r\n    // Toggle Live/Sandbox display.\r\n    const fieldsDisplayAvailability = (shifter) => {\r\n\r\n        // Production field group\r\n        let productionField = document.getElementById('woocommerce_truelayer_truelayer_credentials')\r\n        let productionFieldLabels = [...productionField.nextSibling.nextSibling.querySelectorAll('tbody')];\r\n\r\n        // Sandbox field group\r\n        let sandboxField = document.getElementById('woocommerce_truelayer_truelayer_sandbox_credentials')\r\n        let sandboxFieldLabels = [...sandboxField.nextSibling.nextSibling.querySelectorAll('tbody')];\r\n\r\n        if (shifter == 'testEnvironment') {\r\n            // Production Fields Disabled\r\n            productionField.style.display = \"none\";\r\n            productionFieldLabels[0].style.display = \"none\";\r\n\r\n            // Sandbox Fields Disabled\r\n            sandboxField.style.display = \"block\";\r\n            sandboxFieldLabels[0].style.display = \"block\";\r\n\r\n        } else if (shifter === 'liveEnvironment') {\r\n            // Production Fields Enabled\r\n            productionField.style.display = \"block\";\r\n            productionFieldLabels[0].style.display = \"block\";\r\n\r\n            // Sandbox Fields Disabled\r\n            sandboxField.style.display = \"none\";\r\n            sandboxFieldLabels[0].style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    // Check for empty fields in the Test Environment.\r\n    const checkTestButtonValues = () => {\r\n\r\n        if(testmodeCheckbox.checked){\r\n            if((testClientId.value !== '') && (testSharedSecret.value !== '') && (testCertificate.value !== '') && (testPrivateKey.value !== '')) {\r\n                saveButton[0].removeAttribute('disabled');\r\n            } else {\r\n                saveButton[0].setAttribute('disabled', true);\r\n            }\r\n\r\n        } else {\r\n            saveButton[0].removeAttribute('disabled');\r\n        }\r\n    }\r\n\r\n    // Check for empty fields in the Live Environment.\r\n    const checkButtonValues = () => {\r\n\r\n        if(!testmodeCheckbox.checked){\r\n            if((clientId.value !== '') && (sharedSecret.value !== '') && (certificate.value !== '') && (privateKey.value !== '')) {\r\n                saveButton[0].removeAttribute('disabled');\r\n            } else {\r\n                saveButton[0].setAttribute('disabled', true);\r\n            }\r\n\r\n        }  else {\r\n            saveButton[0].removeAttribute('disabled');\r\n        }\r\n    }\r\n\r\n\t// On page start, check if Test mode is enabled\r\n    if (testmodeCheckbox.checked) {\r\n        fieldsDisplayAvailability('testEnvironment');\r\n        checkTestButtonValues();\r\n\r\n    } else {\r\n        fieldsDisplayAvailability('liveEnvironment');\r\n        checkButtonValues()\r\n    }\r\n\r\n    // Check for field values upon enabling/disabling Test mode\r\n\ttestmodeCheckbox.addEventListener('change', () => {\r\n        if(testmodeCheckbox.checked){\r\n            fieldsDisplayAvailability('testEnvironment');\r\n\t\t    checkTestButtonValues();\r\n\r\n        } else {\r\n            fieldsDisplayAvailability('liveEnvironment');\r\n            checkButtonValues();\r\n        }\r\n\t})\r\n\r\n    // Disable/enable button upon all Sandbox input fields empty/non-empty.\r\n    testEnvironmentSet.forEach(element => {\r\n        element.addEventListener('input', () => {\r\n            checkTestButtonValues();\r\n        })\r\n    });\r\n\r\n\r\n    // Disable/enable button upon all Live input fields empty/non-empty.\r\n    liveEnvironmentSet.forEach(element => {\r\n        element.addEventListener('input', () => {\r\n            checkButtonValues();\r\n        })\r\n    });\r\n\r\n    // On plugin start, check if the beneficiary fields have values.\r\n    checkBeneficiaryFields();\r\n\r\n    // Disable/enable button upon all Beneficiary input fields empty/non-empty.\r\n    beneficiarySet.forEach(element => {\r\n        element.addEventListener('input', () => {\r\n            checkBeneficiaryFields();\r\n        })\r\n    });\r\n\r\n    // Check for field values upon enabling/disabling Test mode\r\n\tpluginEnabledCheckbox.addEventListener('change', () => {\r\n        checkBeneficiaryFields();\r\n\t})\r\n})\r\n"],"names":["document","addEventListener","saveButton","getElementsByName","pluginEnabledCheckbox","getElementById","testmodeCheckbox","beneficiaryMerchantAccount","beneficiaryAccountHolderName","clientId","sharedSecret","certificate","privateKey","testClientId","testSharedSecret","testCertificate","testPrivateKey","beneficiarySet","liveEnvironmentSet","testEnvironmentSet","checkBeneficiaryFields","checked","value","removeAttribute","setAttribute","fieldsDisplayAvailability","shifter","productionField","productionFieldLabels","nextSibling","querySelectorAll","sandboxField","sandboxFieldLabels","style","display","checkTestButtonValues","checkButtonValues","forEach","element"],"sourceRoot":""}